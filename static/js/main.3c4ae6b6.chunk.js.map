{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","map","option","onClick","id","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","setActiveItem","e","value","target","toLowerCase","setState","prevState","countTotalFeedback","Math","round","this","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAgBeA,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCeQC,MAnBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,oBAAIC,UAAU,UAAd,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,6BACE,wBAAQC,QAASJ,EAAiBK,GAAIF,EAAtC,SACGA,KAFIA,SC0BFG,MA9Bf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,6BACE,uCAAUJ,OAEZ,6BACE,0CAAaC,OAEf,6BACE,uCAAUC,OAEZ,6BACE,yCAAYC,OAEd,6BACE,qDAAwBC,EAAxB,aCROC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC0DEC,E,4MAtDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,cAAgB,SAAAC,GACd,IAAMC,EAAQD,EAAEE,OAAOd,GAAGe,cAE1B,EAAKC,UAAS,SAAAC,GAAS,sBAAQJ,EAAQI,EAAUJ,GAAS,O,EAG5DK,mBAAqB,SAAChB,EAAMC,EAASC,GACnC,OAAOF,EAAOC,EAAUC,G,8EAGMF,EAAMG,GACpC,OAAOc,KAAKC,MAAc,IAAPlB,EAAcG,K,+BAGzB,IAAD,EACwBgB,KAAKX,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQgB,KAAKH,mBAAmBhB,EAAMC,EAASC,GAC/CE,EAAqBe,KAAKC,gCAC9BpB,EACAG,GAGF,OACE,gCACE,cAAC,EAAD,CAASd,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiB0B,KAAKV,kBAG1B,cAAC,EAAD,CAASpB,MAAM,aAAf,SACa,IAAVc,EACC,cAAC,EAAD,CAAcG,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA9ChBiB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3c4ae6b6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <ul className=\"btnList\">\r\n      {options.map(option => (\r\n        <li key={option}>\r\n          <button onClick={onLeaveFeedback} id={option}>\r\n            {option}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <p>Good: {good}</p>\r\n      </li>\r\n      <li>\r\n        <p>Neutral: {neutral}</p>\r\n      </li>\r\n      <li>\r\n        <p> Bad: {bad}</p>\r\n      </li>\r\n      <li>\r\n        <p> Total: {total}</p>\r\n      </li>\r\n      <li>\r\n        <p> Positive feedback: {positivePercentage}%</p>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  setActiveItem = e => {\n    const value = e.target.id.toLowerCase();\n\n    this.setState(prevState => ({ [value]: prevState[value] + 1 }));\n  };\n\n  countTotalFeedback = (good, neutral, bad) => {\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage(good, total) {\n    return Math.round((good * 100) / total);\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback(good, neutral, bad);\n    const positivePercentage = this.countPositiveFeedbackPercentage(\n      good,\n      total,\n    );\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['Good', 'Neutral', 'Bad']}\n            onLeaveFeedback={this.setActiveItem}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {total === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}